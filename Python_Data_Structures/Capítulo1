
# First program: Count lines in 'mbox.txt'
fhand = open('mbox.txt')  # Open the file
x = 0  # Initialize counter
for line in fhand:  # Loop through each line in the file
    x += 1  # Increment counter for each line
print(x)  # Print total number of lines

#--------------------
# Second program: Read and convert file content to uppercase
fname = input("Enter file name: ")  # Prompt for file name

# Open the file and read it
with open(fname, 'r') as fh:
    content = fh.read()

# Convert content to uppercase and print
content_upper = content.upper()

print(content_upper.strip())

#-----------------------
# Third program: Calculate the average X-DSPAM-Confidence
fname = input("Enter file name: ")  # Prompt for file name
fh = open(fname)  # Open the file

count = 0  # Initialize line count
total = 0.0  # Initialize total for averaging

# Loop through each line in the file
for line in fh:
    if not line.startswith("X-DSPAM-Confidence:"):  # Skip lines that don't match
        continue
    parts = line.split()  # Split the line into parts
    value = float(parts[1])  # Convert value to float
    total += value  # Add value to total
    count += 1  # Increment count

# Calculate average if there are valid lines
if count > 0:
    average = total / count
else:
    average = 0

# Print the result with 16 decimal precision
print(f"Average spam confidence: {average:.16f}")

#-----------------------

# Fourth program: Build a sorted list of unique words from 'romeo.txt'
fname = input("Enter file name: ")  # Prompt for file name
fh = open(fname)  # Open the file

lst = list()  # Initialize empty list

# Read each line from the file
for line in fh:
    words = line.split()  # Split line into words
    for word in words:
        if word not in lst:  # Check if word is not already in the list
            lst.append(word)  # Append word if not present

lst.sort()  # Sort the list alphabetically
print(lst)  # Print the sorted list

#-----------------------

# Fifth program: Extract email addresses from 'From ' lines in mbox-short.txt
fname = input("Enter file name: ")  # Prompt for file name
if len(fname) < 1:
    fname = "mbox-short.txt"

fh = open(fname)  # Open the file
count = 0  # Initialize counter for lines

# Loop through each line in the file
for line in fh:  
    line = line.rstrip()  # Strip any trailing whitespace
    if line.startswith('From '):  # Check if the line starts with 'From '
        words = line.split()  # Split the line into words
        print(words[1])  # Print the second word (email address)
        count += 1  # Increment count

# Print total count of 'From ' lines
print("There were", count, "lines in the file with From as the first word")

#-----------------------

# Sixth program: Find the person who sent the greatest number of emails
name = input("Enter file:")  # Prompt for file name
if len(name) < 1:
    name = "mbox-short.txt"
handle = open(name)  # Open the file

senders = {}  # Initialize dictionary to hold senders and counts

# Loop through each line in the file
for line in handle:
    line = line.rstrip()  # Strip trailing whitespace
    if line.startswith('From '):  # Check for 'From ' lines
        words = line.split()  # Split the line into words
        email = words[1]  # Get the email address
        senders[email] = senders.get(email, 0) + 1  # Update the count in dictionary

# Find the sender with the maximum count
max_sender = None
max_count = None
for sender, count in senders.items():
    if max_count is None or count > max_count:
        max_sender = sender
        max_count = count

print(max_sender, max_count)  # Print the sender with the most messages

#-----------------------

# Seventh program: Calculate the distribution of messages by hour
name = input("Enter file:")  # Prompt for file name
if len(name) < 1:
    name = "mbox-short.txt"
handle = open(name)  # Open the file

hours_count = {}  # Initialize dictionary to count hours

# Loop through each line in the file
for line in handle:
    line = line.rstrip()  # Strip trailing whitespace
    if line.startswith('From '):  # Check for 'From ' lines
        words = line.split()  # Split the line into words
        time = words[5]  # Get the time portion
        hour = time.split(':')[0]  # Extract the hour
        hours_count[hour] = hours_count.get(hour, 0) + 1  # Count occurrences of each hour

# Sort the hours and print the counts
for hour, count in sorted(hours_count.items()):
    print(hour, count)  # Print hour and corresponding count
### Notes:
#- Each section is clearly separated by comments, making it easier to understand the structure of the code.
#- You can copy each section into your Visual Studio Code and execute them one by one. They should work fine.
#- If there are issues with file paths or file names in your environment, make sure to check the correct location of files like `mbox.txt` or `romeo.txt`.
